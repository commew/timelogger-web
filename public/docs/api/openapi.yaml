openapi: 3.1.0
x-stoplight:
  id: h0tzwk3uync88
info:
  title: timmew
  version: '1.0'
  description: 'https://timmew.commew.net で利用するREST API'
servers:
  - url: 'http://localhost:5757'
    description: local
paths:
  /accounts:
    get:
      summary: アカウントを1件取得する
      tags:
        - accounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
              examples:
                ExampleSuccess:
                  value:
                    id: 1
                    name: NekoKoneko
                    openIdProviders:
                      - sub: '10769150350006150715113082367'
                        provider: google
          headers:
            Request-Id:
              schema:
                type: string
              description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleAuthenticated:
                  value:
                    type: UNAUTHENTICATED
                    title: Account is not authenticated.
          headers:
            Request-Id:
              schema:
                type: string
              description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleInternalServerError:
                  value:
                    type: INTERNAL_SERVER_ERROR
                    title: Internal Server Error.
          headers:
            Request-Id:
              schema:
                type: string
              description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
      operationId: getAccounts
      description: アカウントを1件取得する。アカウントの識別子はAuthorizationに指定したJWT形式のトークンの物が利用される。
      parameters:
        - schema:
            type: string
          in: header
          name: Request-Id
          description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
      security:
        - Authorization: []
    post:
      summary: アカウント登録を行う
      operationId: postAccounts
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
              examples:
                ExampleSuccess:
                  value:
                    id: 1
                    name: NekoKoneko
                    openIdProviders:
                      - sub: '10769150350006150715113082367'
                        provider: google
            application/xml:
              schema:
                type: object
                properties: {}
          headers:
            Request-Id:
              schema:
                type: string
              description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleAccountAlreadyRegistered:
                  value:
                    type: BAD_REQUEST
                    title: Account is already registered.
          headers:
            Request-Id:
              schema:
                type: string
              description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleUnAuthenticated:
                  value:
                    type: UNAUTHENTICATED
                    title: Basic Authentication parameters are incorrect.
          headers:
            Request-Id:
              schema:
                type: string
              description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationProblemDetails'
              examples:
                ExampleValidationError:
                  value:
                    type: UNPROCESSABLE_ENTITY
                    title: Unprocessable Entity.
                    invalidParams:
                      - name: sub
                        reason: sub is required.
                      - name: provider
                        reason: invalid provider format.
          headers:
            Request-Id:
              schema:
                type: string
              description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleInternalServerError:
                  value:
                    type: INTERNAL_SERVER_ERROR
                    title: Internal Server Error.
          headers:
            Request-Id:
              schema:
                type: string
              description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
      description: アカウント登録を行うAPI
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: 'Authorization: Basic の形で送信する'
          required: true
        - schema:
            type: string
          in: header
          name: Request-Id
          description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenIdProvider'
            examples:
              Example 1:
                value:
                  sub: '10769150350006150715113082367'
                  provider: google
        description: ''
      tags:
        - accounts
  /task-groups:
    get:
      summary: タスクグループ一覧を取得する
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    x-stoplight:
                      id: 9iqpaan35qat3
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskGroup'
                      x-stoplight:
                        id: x5wywt1igi2pg
              examples:
                ExampleSuccess:
                  value:
                    groups:
                      - id: 1
                        name: 仕事
                        categories:
                          - id: 1
                            name: 会議
                          - id: 2
                            name: 資料作成
                      - id: 2
                        name: 学習
                        categories:
                          - id: 3
                            name: TOEIC
                      - id: 3
                        name: 趣味
                        categories:
                          - id: 4
                            name: 散歩
                          - id: 5
                            name: 読書
                      - id: 4
                        name: グループ未分類
                        categories:
                          - id: 6
                            name: 移動・外出
            application/xml:
              schema:
                type: object
                properties: {}
            multipart/form-data:
              schema:
                type: object
                properties: {}
          headers:
            Request-Id:
              schema:
                type: string
              description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
        '401':
          description: Unauthorized
          headers:
            Request-Id:
              schema:
                type: string
              description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleAuthenticated:
                  value:
                    type: UNAUTHENTICATED
                    title: Account is not authenticated.
        '500':
          description: Internal Server Error
          headers:
            Request-Id:
              schema:
                type: string
              description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleInternalServerError:
                  value:
                    type: INTERNAL_SERVER_ERROR
                    title: Internal Server Error.
      operationId: getTaskGroups
      description: タスクグループ一覧を取得する。
      security:
        - Authorization: []
      tags:
        - task-groups
    parameters: []
  /tasks:
    post:
      summary: タスクの記録を開始する
      operationId: postTasks
      responses:
        '201':
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
              examples:
                ExampleSuccess:
                  value:
                    id: 1
                    status: recording
                    startAt: '2019-08-24T14:15:22Z'
                    taskCategoryId: 1
        '401':
          description: Unauthorized
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleUnAuthenticated:
                  value:
                    type: UNAUTHENTICATED
                    title: Please set appToken in Authorization Header.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleUnauthorized:
                  value:
                    type: UNAUTHORIZED
                    title: Account is not authorized.
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationProblemDetails'
              examples:
                ExampleValidationError:
                  value:
                    type: UNPROCESSABLE_ENTITY
                    title: Unprocessable Entity.
                    invalidParams:
                      - name: taskCategoryId
                        reason: taskCategoryId is required.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleInternalServerError:
                  value:
                    type: INTERNAL_SERVER_ERROR
                    title: Internal Server Error.
      description: タスクの記録を開始するAPI
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer + 半角スペース + JWT形式のトークンで指定する。
          required: true
        - schema:
            type: string
          in: header
          name: Request-Id
          description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
      tags:
        - tasks
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - taskCategoryId
              properties:
                taskCategoryId:
                  type: integer
            examples:
              Example 1:
                value:
                  taskCategoryId: 1
        description: ''
      security:
        - Authorization: []
    parameters: []
  '/tasks/{taskId}/stop':
    parameters:
      - schema:
          type: integer
        name: taskId
        in: path
        required: true
    patch:
      summary: タスクの記録を停止する
      operationId: patchTaskStopById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
              examples:
                ExampleSuccess:
                  value:
                    id: 1
                    status: pending
                    startAt: '2019-08-24T14:15:22Z'
                    endAt: '2019-08-24T16:15:22Z'
                    duration: 7200
                    taskCategoryId: 1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleInvalidRequest:
                  value:
                    type: INVALID_STATUS_TRANSITION
                    title: Invalid status transition.
                    detail: A task with a status of completed cannot be set to pending.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleUnAuthenticated:
                  value:
                    type: UNAUTHENTICATED
                    title: Please set appToken in Authorization Header.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleUnauthorized:
                  value:
                    type: UNAUTHORIZED
                    title: Account is not authorized.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleInternalServerError:
                  value:
                    type: INTERNAL_SERVER_ERROR
                    title: Internal Server Error.
      description: タスクの記録を停止するAPI
      tags:
        - tasks
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer + 半角スペース + JWT形式のトークンで指定する。
          required: true
        - schema:
            type: string
          in: header
          description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
          name: Request-Id
      security:
        - Authorization: []
  '/tasks/{taskId}/complete':
    parameters:
      - schema:
          type: integer
        name: taskId
        in: path
        required: true
    patch:
      summary: タスクの記録を終了する
      operationId: patchTaskCompleteById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
              examples:
                ExampleSuccess:
                  value:
                    id: 1
                    status: completed
                    startAt: '2019-08-24T14:15:22Z'
                    endAt: '2019-08-24T18:15:22Z'
                    duration: 14400
                    taskCategoryId: 1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleInvalidRequest:
                  value:
                    type: INVALID_STATUS_TRANSITION
                    title: Invalid status transition.
                    detail: Status is already completed.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleUnAuthenticated:
                  value:
                    type: UNAUTHENTICATED
                    title: Please set appToken in Authorization Header.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleUnauthorized:
                  value:
                    type: UNAUTHORIZED
                    title: Account is not authorized.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleInternalServerError:
                  value:
                    type: INTERNAL_SERVER_ERROR
                    title: Internal Server Error.
      tags:
        - tasks
      description: タスクの記録を終了するAPI
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
          description: Bearer + 半角スペース + JWT形式のトークンで指定する。
        - schema:
            type: string
          in: header
          name: Request-Id
          description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
      security:
        - Authorization: []
  /tasks/recording:
    get:
      summary: 記録中のタスク一覧を取得する
      tags:
        - tasks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    x-stoplight:
                      id: sqo6mgyxp4lqf
                    items:
                      $ref: '#/components/schemas/Task'
                      x-stoplight:
                        id: 7sb54n7vf51n7
              examples:
                ExampleSuccess:
                  value:
                    tasks:
                      - id: 1
                        status: recording
                        startAt: '2019-08-24T14:15:22Z'
                        endAt: '2019-08-24T18:15:22Z'
                        duration: 14400
                        taskCategoryId: 1
                      - id: 2
                        status: recording
                        startAt: '2019-08-24T14:15:22Z'
                        endAt: '2019-08-24T18:15:22Z'
                        duration: 14400
                        taskCategoryId: 1
                      - id: 3
                        status: recording
                        startAt: '2019-08-24T14:15:22Z'
                        endAt: '2019-08-24T18:15:22Z'
                        duration: 14400
                        taskCategoryId: 1
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleUnAuthenticated:
                  value:
                    type: UNAUTHENTICATED
                    title: Please set appToken in Authorization Header.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleUnauthorized:
                  value:
                    type: UNAUTHORIZED
                    title: Account is not authorized.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleInternalServerError:
                  value:
                    type: INTERNAL_SERVER_ERROR
                    title: Internal Server Error.
      operationId: getTasksRecording
      description: 記録中のタスク一覧を取得する。
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer + 半角スペース + JWT形式のトークンで指定する。
          required: true
        - schema:
            type: string
          in: header
          name: Request-Id
          description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
      security:
        - Authorization: []
    parameters: []
  /tasks/pending:
    get:
      summary: 停止中のタスク一覧を取得する
      tags:
        - tasks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    x-stoplight:
                      id: 7x23cj7cb22im
                    items:
                      $ref: '#/components/schemas/Task'
                      x-stoplight:
                        id: 8gkkyh1itcoiz
              examples:
                ExampleSuccess:
                  value:
                    tasks:
                      - id: 1
                        status: pending
                        startAt: '2019-08-24T14:15:22Z'
                        endAt: '2019-08-24T18:15:22Z'
                        duration: 14400
                        taskCategoryId: 1
                      - id: 2
                        status: pending
                        startAt: '2019-08-24T14:15:22Z'
                        endAt: '2019-08-24T18:15:22Z'
                        duration: 14400
                        taskCategoryId: 1
                      - id: 3
                        status: pending
                        startAt: '2019-08-24T14:15:22Z'
                        endAt: '2019-08-24T18:15:22Z'
                        duration: 14400
                        taskCategoryId: 1
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleUnAuthenticated:
                  value:
                    type: UNAUTHENTICATED
                    title: Please set appToken in Authorization Header.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleUnauthorized:
                  value:
                    type: UNAUTHORIZED
                    title: Account is not authorized.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                ExampleInternalServerError:
                  value:
                    type: INTERNAL_SERVER_ERROR
                    title: Internal Server Error.
      operationId: getTasksPending
      description: 停止中のタスク一覧を取得する。
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer + 半角スペース + JWT形式のトークンで指定する。
          required: true
        - schema:
            type: string
          in: header
          name: Request-Id
          description: ユニークなID、リクエスト側からこれを指定した場合はレスポンス時にそのまま返ってくる、指定されない場合はAPI側で生成する
      security:
        - Authorization: []
    parameters: []
components:
  schemas:
    Account:
      title: Account
      x-stoplight:
        id: zdqmyvdfetmvo
      type: object
      description: アカウント
      examples:
        - id: 1
          name: NekoKoneko
          openIdProviders:
            - sub: '10769150350006150715113082367'
              provider: google
        - id: 2
          name: MyCat
          openIdProviders:
            - sub: '999999999999999999999999999'
              provider: google
            - sub: lineid99999999999999999999999
              provider: line
      properties:
        id:
          type: number
          minimum: 1
          description: アカウントの識別子
        name:
          type: string
          description: アカウント名
        openIdProviders:
          type: array
          items:
            $ref: '#/components/schemas/OpenIdProvider'
      additionalProperties: false
      required:
        - id
        - name
        - openIdProviders
    OpenIdProvider:
      title: OpenIdProvider
      x-stoplight:
        id: 1ofuv2pxl2mft
      type: object
      description: 登録・ログイン時に利用するOpenIdProvider
      examples:
        - sub: '10769150350006150715113082367'
          provider: google
        - sub: lineid99999999999999999999999
          provider: line
      properties:
        sub:
          type: string
          example: '10769150350006150715113082367'
          description: OpenIdProviderのユーザー識別子
        provider:
          type: string
          description: 'OpenIdProviderの種類を表す .e.g. google, line'
      additionalProperties: false
      required:
        - sub
        - provider
    ProblemDetails:
      title: ProblemDetails
      x-stoplight:
        id: m734l2dezcaxw
      type: object
      additionalProperties: false
      description: エラー発生時に返す構造体（RFC7807を参考にしている）
      examples:
        - type: UNAUTHENTICATED
          title: Account is not authenticated.
      properties:
        type:
          type: string
          example: UNAUTHENTICATED
          description: RFC7807を参照。エラーの種類を表す文字列。
        title:
          type: string
          example: Account is not authenticated.
          description: RFC7807 エラーのタイトル。
        detail:
          type: string
          x-stoplight:
            id: ogplydljky7yx
          description: RFC7807を参照。エラーのsを表す文字列。
      required:
        - type
        - title
    ValidationProblemDetails:
      title: ValidationProblemDetails
      x-stoplight:
        id: 31j9xxlyuaog0
      type: object
      additionalProperties: false
      description: バリデーションエラーの発生時に返す構造体（RFC7807を参考にしている）
      properties:
        type:
          type: string
          description: RFC7807を参照。エラーの種類を表す文字列。
          example: UNPROCESSABLE_ENTITY
        title:
          type: string
          description: RFC7807 エラーのタイトル。
          example: Unprocessable Entity.
        invalidParams:
          type: array
          description: RFC7807 バリデーションエラーの詳細情報
          items:
            $ref: '#/components/schemas/InvalidParam'
      required:
        - type
        - title
        - invalidParams
      examples:
        - type: UNPROCESSABLE_ENTITY
          title: Unprocessable Entity.
          invalidParams:
            - name: email
              reason: email is required.
            - name: phoneNumber
              reason: phoneNumber is required.
    InvalidParam:
      title: InvalidParam
      x-stoplight:
        id: hocnwkrvj455h
      type: object
      properties:
        name:
          type: string
          description: バリデーションエラーとなったキー名が格納される
        reason:
          type: string
          description: バリデーションエラーが発生した理由が格納される
      additionalProperties: false
      required:
        - name
        - reason
      examples:
        - name: email
          reason: email is required.
      description: バリデーションエラーの詳細を表す（RFC7807を参考にしている）
    TaskGroup:
      title: TaskGroup
      x-stoplight:
        id: woovnu5i1e8pp
      type: object
      examples:
        - id: 1
          name: 学習
          categories:
            - id: 1
              name: TOEIC
        - id: 1
          name: 仕事
          categories:
            - id: 1
              name: 会議
            - id: 2
              name: 資料作成
      description: タスクグループ
      properties:
        id:
          type: number
          x-stoplight:
            id: 2mn9522zynwyr
        name:
          type: string
          x-stoplight:
            id: rs1u9kjoqhz8n
        categories:
          x-stoplight:
            id: m8552x2mg7v2c
          type: array
          items:
            $ref: '#/components/schemas/TaskCategory'
            x-stoplight:
              id: tru4044rlb4sq
    TaskCategory:
      title: TaskCategory
      x-stoplight:
        id: 4och16fl40wyw
      type: object
      description: タスクカテゴリ
      examples:
        - id: 1
          name: 会議
      properties:
        id:
          type: integer
          x-stoplight:
            id: 0p9agopjfd82a
        name:
          type: string
          x-stoplight:
            id: r7gswuiwuqn7z
      required:
        - id
    Task:
      title: Task
      x-stoplight:
        id: 0dlk8ocssbwth
      type: object
      examples:
        - id: 1
          status: completed
          startAt: '2019-08-24T14:15:22Z'
          endAt: '2019-08-24T18:15:22Z'
          duration: 14400
          taskCategoryId: 1
      properties:
        id:
          type: integer
        status:
          type: string
          x-stoplight:
            id: fbrfne1nwy96v
          enum:
            - pending
            - completed
            - recording
          default: recording
        startAt:
          type: string
          x-stoplight:
            id: gcv5r8hxoaf1o
          format: date-time
          description: タスク開始の開始時刻
        endAt:
          type: string
          x-stoplight:
            id: 83at7gcxo649h
          format: date-time
          description: タスク開始の停止時刻
        duration:
          type: integer
          x-stoplight:
            id: czb6s8y8640ud
          description: タスクの実行時間（秒）
        taskCategoryId:
          type: integer
          x-stoplight:
            id: qpc2w8w438i7c
      required:
        - taskCategoryId
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      description: Bearer + 半角スペース + JWT形式のトークンで指定する。
